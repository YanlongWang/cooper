
<!-- saved from url=(0040)http://www.uml.org.cn/mxdx/200912233.asp -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=GBK">

<title>包的设计原则</title>
</head>
  
<body leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="95%" border="0" align="center" cellpadding="3" cellspacing="1">
                    <tbody><tr> 
                      <td valign="top" bgcolor="#FFFFFF" class="content">
                        <h3>无环依赖原则</h3>
                        <p><strong>前言</strong></p>
                        <p>本文介绍The Acyclic Dependencies Principle (ADP)：无环依赖原则，或者非循环依赖原则。</p>
                        <p><strong>概要</strong></p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;The dependency structure between packages must be 
                          a directed acyclic graph (DAG). That is, there must 
                          be no cycles in the dependency structure.</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;包之间的依赖结构必须是一个直接的无环图形（DAG）。也就是说，在依赖结构中不允许出现环（循环依赖）。</p>
                        <p>换成另一个说法是：</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;The dependencies between packages must not form cycles.</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;包之间的依赖不能是一个环状形式。</p>
                        <p><strong>包的依赖</strong></p>
                        <p>如果一个包A 中的类引用了包B中的类，我们称包A依赖包B。</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;“依赖”在具体的程序语言中表现为，如果A依赖B，C/C++语言则在A包的文件/类中通过#include语句包含B包中的文件/类；Java语言则A包的类中通过import语句引入B包中的类。</p>
                        <p><img src="./包的设计原则_files/ShowImageaa.gif"></p>
                        <p>图1（包A依赖包B）</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;虚线表示一种依赖关系，箭头表示依赖的方向，箭头所在的一侧就是被依赖的包。</p>
                        <p><strong>包的循环依赖</strong></p>
                        <p>我们上面讨论了并用图形表示了包之间的依赖关系。如果存在2个或2个以上的包，它们之间的依赖关系图出现了环状，我们就称包之间存在循环依赖关系。<br>
                          也就是说它们的依赖结构图根据箭头的方向形成了一个环状的闭合图形。如图：</p>
                        <p><img src="./包的设计原则_files/ShowImagess.gif"></p>
                        <p>图2：包的循环依赖</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;如图：A依赖B，B依赖C，C依赖A，形成了一个环状依赖。</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>包的非循环依赖原则</strong></p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;包是一个比较合适的发布粒度，当修改了包中的代码（类，模块等）并发布新的版本时，我们需要把该包以及它所依赖的其它包一起发布。发布之后，还需要验证系统是否能在新发布的版本下正常运作。</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;如果多个包之间形成了循环依赖，比如如图2，A依赖B，B依赖C，C依赖A，我们修改了B并需要发布B的一个新的版本，因为B依赖C，所以发布时应该包含C，但C同时又依赖A，所以又应该把A也包含进发布版本里。</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;也就是说，依赖结构中，出现在环内的所有包都不得不一起发布。它们形成了一个高耦合体，当项目的规模大到一定程度，包的数目变多时，包与包之间的关系便变得错综复杂，各种测试也将变得非常困难，常常会因为某个不相关的包中的错误而使得测试无法继续。而发布也变得复杂，需要把所有的包一起发布，无疑增加了发布后的验证难度。</p>
                        <p><strong>循环依赖的打破方法</strong></p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;如果包的依赖形成了环状结构，怎么样打破这种循环依赖呢？</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;有2种方法可以打破这种循环依赖关系：第一种方法是创建新的包，第二种方法是使用DIP（依赖倒置原则）和ISP（接口分隔原则）设计原则。</p>
                        <p>方法一：创建新的包</p>
                        <p>比如对于图2这种依赖结构：</p>
                        <p><img src="./包的设计原则_files/ShowImagedd.gif"></p>
                        <p>图2：包的循环依赖</p>
                        <p>包C要依赖包A，必定A中包含有A，C共通使用的类，把这些共同类抽出来放在一个新的包D里。这样就把C依赖A变成了C依赖D以及A依赖D，从而打破了循环依赖关系。如图：</p>
                        <p><img src="./包的设计原则_files/ShowImageff.gif"></p>
                        <p>这样，包的依赖关系就从A-&gt;B-&gt;C-&gt;A变成了：</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;A-&gt;B-&gt;C-&gt;D</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;A-&gt;D</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;方法二：DIP与ISP设计原则</p>
                        <p>ISP（接口分隔原则）可以剔除美用到的接口。DIP（依赖倒置原则）在类的调用之间引入抽象层。</p>
                        <p>如图,，包A依赖包B（因为包A中的类U使用了包B中的类X）；反过来，包B又依赖包A（因为包B中的类Y使用了包A中的类V）</p>
                        <p><img src="./包的设计原则_files/ShowImagegg.gif"></p>
                        <p>包A，包B之间就形成了一种循环依赖。</p>
                        <p>我们使用DIP设计原则为V抽象一个接口IVforY，并把该接口放在B包中。</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;这样就把Y对V的调用转化为：</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;V继承IVforY</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;Y调用IVforY</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;如图：</p>
                        <p><img src="./包的设计原则_files/ShowImagehh.gif"></p>
                        <p>这样一来，包B中的类就不依赖任何包A中的类了。</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>小结</strong></p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;无环依赖原则（ADP）为我们解决包之间的关系耦合问题。在设计包结构时，不能有循环依赖。</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>参考资料</strong></p>
                        <p><a href="http://www.objectmentor.com/resources/articles/granularity.pdf" target="blank" class="content_a">Granularity</a><img border="0" src="./包的设计原则_files/edit_arrow6.gif"> 
                          by Robert C. Martin。</p>
                        <p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf" target="blank" class="content_a"> 
                          Principles and Patterns</a><img border="0" src="./包的设计原则_files/edit_arrow6.gif"> 
                          by Robert C. Martin。</p>
                       </td></tr>
                    </tbody></table>
</body></html>