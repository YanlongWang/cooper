1.2.5_03 2015-06-15

a）将AnalyzerMgr中与remote相关的逻辑移入到AnalyzerRemoteMgr中

b）将ui、webserver组件中涉及SearchUtil.getPackages的逻辑该由JDependServiceProxy.getPackages来承担，以支持parse可以完全在远程运行

c）支持对组件关系图形中节点人工拖拽的位置保存

d）梳理异常体系，创建ParseException、ParseClassException、ServiceException、ComponentException、RefactorException等异常类型

e）为类列表中的类增加图形化查看传入传出的功能

f）将cooper-ui重命名为cooper-client，将cooper-ui-remote重命名为cooper-client-remote
     将cooper-report合并到cooper-client中
     拆分cooper-core，将部分组件（config、command、analyzer）合并到cooper-client中
     将cooper-core-remote合并到cooper-client-remote中
     
g）将cooper-manager重命名为cooper-server
     将cooper-server-remote合并到cooper-server中
     将cooper-service-interface重命名为cooper-server-interface


1.2.5_02 2015-05-27

a）将JavaClass改名为JavaClassUnit

b）将JavaClassUnit中的JavaClass独立出来，并修改周边代码

c）修正重构命令中创建组件中的bug

d）创建新的maven Module：cooper-metadata，用于分离cooper-parse中使用的cooper-model

e）修正JavaClassInheritTreeCreator中的bug

f）创建cooper-test Maven Module

g）重构todolist，创建TODOIdentifyer接口，并将原TODOListIdentifyerFacade中的代码移入到各自的TODOIdentifyer中

h）改进类是否稳定的算法

i）重新规划配置文件，将parse和jdepend中的个别配置项移入到新创建的service中

j）孤立组件取消稳定性、抽象程度合理性、内聚性指标的计算

k）在core中创建WisdomAnalysisResult，用于隐藏knowledge.Expert相关逻辑

l）删除了capacity和motive模块

m）向基础结构InvokeItem和JavaClassRelationItem增加id列，作为其唯一性的标识

n）向类的传入传出列表中增加在类型列上的点击事件，以方便可以直接查看明细


1.2.5_01 2015-05-08

a）为了区分单机模式和客户端服务器模式创建了新的maven module：cooper-ui-remote、cooper-core-remote、cooper-service-remote
  （三个modules为逐一依赖关系，并同时成为cooper-ui、cooper-core、cooper-service的扩展）
  
b）改进对组件内聚性明细窗口中内聚值列的钻取内容展示

c）将计算组件内聚性的【分组耦合最大顺序差值】改为【分组耦合顺序差值均值】（动机：鼓励一下复用）

d）创建GroupInfoCalculator用于创建分组耦合信息和分组内聚信息

e）创建SubJDependUnit接口，以及AbstractSubJDependUnit抽象类，并将其融入到原有的JDependUnit体系中

f）将cohesion属性由AbstractJDependUnit下移到Component中

g）修正JavaClass.isState中的bug

h）两个类之间的关系类型由单一类型改为同时可以有多种类型（对类关系的强度有一定影响）

i）创建识别类类型的分析器

1.2.4_09 2015-04-07

a）向组件内聚性明细窗口中的包列表上的名称增加点击动作，可以浏览包下的类列表

b）修正AnalysisResult.getTheClass方法中的bug

c）取消向JavaClass双向创建JavaClassRelationItem的设计，采用双方持有一个item的设计（current->source;depend->target）

d）增加分析器：识别AppService

e）增加分析器：识别DomainService

f）进一步完善【过滤掉不被组件包含的JavaClass】

g）修正识别包变动窗口bug

1.2.4_08 2015-03-25

a）增加【购物车】功能，基于它可以实现不同分析命令的分析结果对比

b）向分数页面增加导出分析结果图标

c）调整service组件的内部结构（将平铺的子组件按着稳定性和通用性划分得更有层次，为分离remote代码做准备）

d）调整core组件中的子组件关系、职责，并按着稳定性和通用性划分，为分离remote代码做准备

e）调整组件内聚性计算公式：由类作为内聚性计算单元改为包作为计算单元，并创建计算内聚性的概念接口SubJDependUnit

f）修正在copy分析结果时的bug（内部类不被直接包含在包中）


1.2.4_07 2015-02-27

a）修正了【将内部类作为宿主的私有元素看待，而不作为独立类存在】中的bug

b）修正了类列表中对传入和传出列的排序bug

c）在关于窗口中增加浏览release note功能

d）改进Component.containsClass的算法

e）改进Component.open的算法

1.2.4_06 2015-02-10

a）修改了识别类级别循环依赖的算法缺陷

b）优化了计算组件内聚值的算法

c）将内部类作为宿主的私有元素看待，而不作为独立类存在（对组件的内聚性、封装性的分值会有较大影响）

d）改进对LocalInvokeItem的收集策略（提升性能）

e）修正JavaClass.getMethods中的bug

f）修正识别单例模式算法中的bug

g）向类列表增加批量查看传入和传出功能

1.2.4_05 2015-01-29

a）改进ui组件中弹出窗口构造函数参数的数据结构（String->Component\JavaClass\JDependUnit）

b）简化JavaClassRelationItem.getRelationIntensity的设计，删除JavaClassRelationType.getRationality（类关系类型合理性）

c）清除部分复杂设计（抽象类识别逻辑、报告生成器）

d）增加【分数对应的美女】功能（在总分数后有一个MM的链接，点击就是你的分数对应的美女）

1.2.4_04 2015-01-18

a）向Method增加getStability方法

b）修正创建命令组后死机的问题

c）增加分析器【Callback识别】

	当一个组件中内置了Callback后，其测试结果依赖于Callback接口的实例化类，这会增加测试的难度和组件运行时的不确定性。 
	识别Callback的规则是：1、该类为接口，并且其方法有返回值，该方法被本组件调用
	                    2、该类的实现类不与该类处于一个组件内 
	                    3、实现类的构造过程不在该组件内

d）调整图形默认颜色（采用绿色系）

e）调整待做事项识别器对于同一个元素（关系和组件）多次识别TODO的问题


1.2.4_03 2015-01-09

a）向方法列表中增加级联传入数量（也就是全部调用过这个方法的方法集合）

b）向方法列表中增加是否包含进程间调用列

c）新增对进程间调用类型为RMI的识别算法

d）向方法列表中的传入、级联传入、传出列增加点击事件，并向弹出的窗口中增加调用类型列（Local、Http、RMI）

f）将jdk由1.6升级到了1.7

g）改进了Method.supplyInvokeItem方法的性能


1.2.4_02 2014-12-24

a）增加对分析结果的导出和导入（数据文件类型为.cpr）

b）修正识别循环依赖算法的bug

c）将采用多线程处理JavaClass的地方进行分组处理（默认4组，希望你的CPU是4核以上的）

d）将导入外部分析结果的过程在独立线程中执行，并增加文字性的进度监控


1.2.4_01 2014-12-17

a）更新底层解析class的bcel版本5.2->6.0 RC3，获取解析Annotation能力

b）简化原有对Transactional和Table注解的获取方式

c）向static属性增加获取初始值的逻辑（ClInitMethodReader）

d）增加对注解RequestMapping的识别

e）增加了对Http调用的识别，并创建了一个新的类关系Http（默认强度为0.1，相同的调用者和被调用者有多次Http调用关系时，取1次）【HttpInvokeItem】

f）将JavaClass的supply逻辑由JavaClassUtil转移到各级Entity上（JavaClass、JavaClassDetail、Attribute、Method）


1.2.3_09 2014-12-04

a）完善在读取、拷贝分析结果时按着Id搜索JavaClass和JavaPackage

b）将类列表中定位组件的逻辑由name改为id

c）提升待办事项生成性能

d）修改图形组件关系显示页面中仅显示问题关系bug

1.2.3_08 2014-11-24

a）修正识别重复类分析器输出bug

b）重构底层文件读取模块

c）重构JavaPackage收集逻辑（考虑位置），并改进定制组件逻辑

d）完善定制组件UI（加入对位置的考虑）

e）改进识别循环依赖的算法（从单一节点搜索设置脚印到为其他节点提供搜索信息到搜索前考虑所在组件是否存在循环依赖）

1.2.3_07 2014-11-5

a）将最大内存数由1500M减少到1024M

b）简化JDependReport的设计，只保留createReport方法（删除了createMainReport和createOtherReport）

c）将结果页面的组织形式由【小结、关系、模式、能力】变为【系统、组件、类、方法】

d）将Method.getInvokedMethods的计算时机由lazyload改变到JavaClassUtil.supplyJavaClassDetailMethodInvoke中执行，并改变了其算法

e）向新的结果页面中的类列表增加重构比较功能

1.2.3_06 2014-10-17

a）增加分析器：识别共同调用的方法集合

b）向关系列表增加是否有问题列

c）向关系明细列表中的移动类功能增加选择移动的类集合步骤

d）修正装载分析器列表bug

1.2.3_05 2014-09-25

a）改进待办事项的显示策略（对部分待办事项可以图形显示）

b）改进对彼此依赖的组件关系调整的算法（追加了考虑关系性质的情况）

c）进一步优化组件模型配置信息抽象类，使其识别新变化的包或类透明（抽象）。

d）向全部类列表、关系明细列表增加移动类功能

e）向全部类列表增加调用者和被调用者过滤器

f）向关系明细列表增加分析功能

g）实现了关系图形、关系明细的无限钻取分析，并在最后页面上执行虚拟移动时全部关闭之前的窗口

1.2.3_04 2014-09-15

a）增加全部类列表页面

b）修改填充类方法逻辑缺欠

c）改进组件模型配置信息数据结构（抽象化ComponentModelConf）

d）支持以类为单位创建组件

1.2.3_03 2014-08-26

a）将RelationCreator（建立组件之间的关系）和JavaClassRelationCreator（建立类之间的关系）的算法改造成多线程执行

b）将JavaClassUtil、JavaClassAvertCheat等的算法改造成多线程执行

c）将PatternIdentifyerMgrImpl识别设计模式的算法改造成多线程执行

d）优化显示性能（lazy calculate）

e）修正在创建命令组时修改分析路径不马上有效的缺陷（向Step增加refresh方法）

1.2.3_02 2014-08-09

a）增加分析器执行进度跟踪

b）修正JavaClass.clone bug（将place数据类型简化）

c）完善Method.selfLineCount的计算算法

d）修正Component.list bug

e）增加LSP检测分析器

1.2.3_01 2014-07-31

a）改进底层文件收集的数据结构

b）增加分析器：重复类识别（识别不同jar包中是否存在同包名同类名的类（jar包冲突））

c）完善了统计方法调用情况的分析器（Method.isInvoked）

d）修改核心模型，向AbstractJDependUnit中增加AnalysisResult的引用

1.2.2_10 2014-07-16

a）通过ThreadLocal提升MoveRelationTODOItem的性能

b）向关系列表中增加虚拟重构比较功能

c）向组件、类和关系列表的比较功能中加入NEW状态

d）向重构列表中增加比较功能

e）向分数页面中增加比较功能，并隐藏差异页面

f）向移动关系的TODOItem的解释中增加Class的关系信息（辅助决策）

g）重构了虚拟重构部分的代码，简化了组件合并的设计

h）删除了界面上的面向对象指数指标，增加了组件所属区域信息

1.2.2_09 2014-06-30

a）取消浏览器版启动时动态装载类信息的逻辑，采用硬编码方式获取类信息（节省内存）

b）向结果页面增加交互功能（查看组件内类列表和关系明细）

c）开发管理端逻辑（浏览、查看、删除分析结果）

d）引入shiro保护管理端逻辑

e）重构部分组件中的类，提升组件的封装性（对内聚性有正向影响）

f）向类列表中增加虚拟重构比较功能

g）向管理端增加下载结果数据的功能

1.2.2_08 2014-5-26

a）取消1.2.2_07 a）的设计，删除ResultSaver[设计缺欠]，将其功能移入到ExecuteHistoryPanel中

b）向待做事项增加批量执行虚拟重构条目的特性

c）删除了源码引用的两个图形工程

d）向webserver工程引入bootstrap和spring

e）改进Relation的getAttentionLevel算法

f）完成Cooper IE版的初始版本开发（WebAnalysisResult、AnalyseController、AnalyseService）

1.2.2_07 2014-04-16

a）将service对knowledge组件的依赖上移到core组件中，通过实现AnalyseListener接口来实现分析结果的保存[ResultSaver]

b）增加copy组件模型的功能

c）将显示结果中的结果窗口的计算时机延迟到查看时进行 SubResultTabPanel（提升性能）

d）对AnalyseListener进行排序执行（修正bug）

1.2.2_06 2013-07-18

a）补充国际化

b）将分数计算的规则由不均分变为均分

1.2.2_05 2013-06-07

a）在知识库中创建架构模式识别框架，并增加两个识别器：CoreComponentIdentifyer和CommonalityLayerIdentifyer

b）修改CircleService启动时机（当打开CirclePanel时才启动CircleService）

c）将设计能力评价的逻辑执行时机延后，提高用户感受

d）在结果页中增加模式tab页，分成了架构模式和设计模式两个子tab页

e）改进UI相关的配置和操作信息的存储，使其可以区分工作区

f）简化异步执行器AsynAction的设计

g）修改Method.getArgumentCount()的bug

h）修改invokeItem和method相关bug（1、invoked包含了对父类或接口方法的调用；2、清除编译器生成的Synthetic方法），使得Cooper可以采集到的方法间调用的信息更加细致和准确

i）增加浏览类方法列表窗口，并可以继续查看传入和传出的方法列表。

1.2.2_04 2013-05-07

a）为设计模式识别增加了一种新的实现，采用了一种更符合领域的结构实现了识别设计模式的功能

b）改进了部分设计模式识别的算法（装饰、门面、代理）

c）增加了统计方法被调用次数的分析器（当一个方法只在一处被使用，并且该方法是一个领域层方法，值得分析该方法放在领域层类上是否合适）

d）修正了Method判断相等的bug

e）将Command、CommandAdapter等从config中独立出来，形成command

f）改进CommandConf的存储格式

g）将TableView显示在结果页面，隐藏了TDC，删除了TableView分析器

h）简化了分析器框架的过度设计，删除了AnalyzerChain，使得分析器框架不具备了一次执行多个分析器的能力

1.2.2_03 2013-04-03

a）修正Method计算长度的算法bug

b）改进核心领域模型，将JavaClass.getMethods改为getSelfMethods，增加getMethods方法，返回所有可以调用的Methods（去除了已经Override的Method）

c）改进核心领域模型，向JavaClassDetail中增加superClass和interfaces对象引用

d）调整JavaClassBuilder.build()内部结构，提升性能和可读性

e）向Attribute和Method增加类型属性，并去掉在JavaClassDetail中记录的类型属性

f）调整AbstractClassBuilder和FileManager的职责，在Parse中协调两者，而不是AbstractClassBuilder调用FileManager

g）增加并改进设计模式识别算法（性能、准确性等）

h）改进了领域分析器的入口参数和返回值类型

i）编写架构模式分析“领域分析器”（领域分析器没有直接发布到单机版中），并集成到分析工具中

j）向组件列表中增加查看某个组件内聚性的窗口

1.2.2_02 2013-03-08

a）将首次计算AreaComponent的时机由第一次打开设计动机窗口移到创建分析结果时

b）向关系图形中增加仅显示问题关系功能

c）创建评价设计能力的功能

d）组件关系图中增加对隐藏功能的Undo(回退)和Nextdo（前进），以利于用户更加方便的关注自己感兴趣的组件关系。

e）将命令执行中保存分析结果的功能移入到showResultLater（新线程）中执行，以提高用户感受

f）更新了组件模型的存储格式（由1级信息变为多级信息），增加了未包含的包信息（与之前格式不兼容）

g）在展示分析结果时，增加了包变动提醒，并可以在打开的窗口右键修改组件模型

h）向创建组件模型面板增加了是否显示包含外部包的选项

1.2.2_01 2013-01-17

a）增加接口Measurable，用于规范“可以被指标评价的”实体，目前JDependUnit和AnalysisResultSummary都实现了该接口

b）将封装性指标纳入到持久化管理中（可直接存取，而不需要计算）

c）修正了类型为Define的TableInfo识别逻辑中的缺欠

d）重构了逻辑组件service，将接口和实现更细致的分解为service-interface和service两个物理组件，并隐藏物理组件service中的impl（取消core对service物理组件的依赖）

e）改进原抽象类资格评判器算法（存在多级子类或在继承层中也有资格），增加新的抽象类资格评判器（虽然只有一个子类，但该子类不在一个组件中也视其有资格），并作为默认评判器

f）增加稳定性指标展开详细页面（图形和文本）

g）分离系统和业务日志

h）将生成结果任务中的识别TODOList任务从主任务中分离出来在独立线程中执行，以提高用户运行分析命令的反应感受。 

i）创建MoveRelationTODOItem，将组件间的“粗”关系变“细”（依赖高内聚低耦合原则）

j）精化移动类的算法（按着关系性质、强度来移动类，而不是简单的按着孤立类的数量）：将MoveRelationTODOItem抽象化，并由MoveRelationForChangeDirTODOItem、MoveRelationForMutualDependTODOItem、MoveRelationForReduceCouplingTODOItem子类化实现其个性逻辑（与关系类型对应），替代以前的MoveJavaClassTODOItem

k）增加了将关系图形另存为图片的功能

l）创建Scored接口（可以被分数描述的），并抽取AnalysisResult中的部分代码移入到抽象类AnalysisResultScored中

m）移动JavaClass imports的计算时机（从解析时计算，到解析完成后计算），提高性能。

n）丰富AreaComponent的计算方式，可以按着ComponentLayer、PathInfo和Instability三种方式计算，并自动选择覆盖度最高的计算方式

1.2.2_00 2012-12-21

a）改进重构中移动类的算法（将关系一端的类的孤立的数量总和较大的类移动另一端）

b）将JavaClass中的Component数据类型由JDependUnit改为Component

c）细化类包含关系算法，将只是使用目的的类属性视其为调用关系而非包含关系

d）修改Method的getArgumentTypes和getReturnTypes方法中的bug

e）修正动机模块与分析结果之间配合的bug

f）向TableInfo中增加新的类型Define，用于收集PO的注解

g）改进组件封装性计算公式（由私有类比例改为未被使用的类比例），并纳入到整体分数评价中（将内聚性的40分分给封装性20分）

h）改进小结首页面整体呈现风格（增加了封装性得分、增加了链接和图形，改进了布局）

i）向猜测设计动机窗口增加操作历史tab页,并形成了第一版的猜测设计动机逻辑

j）简化了启动画面

1.2.1_06 2012-11-28

a）改进JavaClassBuilder的性能

b）改进JDependUnit.getClasses().contains性能

c）改进JavaClassTreeCreator的算法

d）改进存在问题的关系的比例算法

e）向关系图形中的节点增加“隐藏自己”的功能

f）增加分析器“搜索DAO上的没有分页信息的批量查询方法”和反模式“搜索不合理的事务注解”

g）启动关于“猜测设计动机子系统”的模块编写

h）增加对jpa注解sql中表链接的识别

i）将AnalysisResult中的units数据类型由Collection<JDepentUnit>改为Collection<Component>

j）创建组件时，将组件的分类由平台组件和业务组件扩展为平台组件、领域业务组件、应用业务组件、交互组件四种

k）向Component中增加组件区域（AreaComponent）属性，向Relation中增加是否被关注（isAttention）属性，主要为猜测设计动机子系统服务

1.2.1_05 2012-09-21

a）精化组件抽象程度调整算法

b）增加表格导出功能

c）改进稳定性计算公式，由【传出数值/(传出数值 + 传入数值)】改为【传出耦合值/(传出耦合值 + 传入耦合值)】与原方式的“混搭”

d）调整Component，将relations作为属性增加到Component中。

e）增加jarComponent，能够按着提供的jar分组分析组件关系。

f）将易变性和封装性指标体现在UI上，包括组件列表和类列表

g）修正构建模式识别的bug

h）将所有resource移入到classpath中，使其发布文件只有一个exe

i）向WelcomeDialog增加启动进度条

1.2.1_04 2012-06-28

a）通过改变算法和数据结构大幅提升了RefactorTool中CopyUtil的性能

b）改进JavaClassRelationItem的hashCode和equals算法

c）将创建AnalysisResultSummary的职责由AnalysisResult移到AnalysisResultSummary中

d）创建组件封装性指标(私有Class所占比例)

e）建立组件封装性、基于数据库表完成组件间通讯的比例、浏览包结构的分析器

f）修正JavaPackageTreeCreator的bug，并提升性能

g）改进Method和Attribute数据结构，通过继承AccessFlags使其具有识别可访问性等能力

h）改进JavaClass，通过包含access_flags使其具有识别可访问性等能力

i）改造PackageFilter，将其由parse移入到model中

j）向Method增加invokeItems信息，用以识别设计模式

k）将StringBuffer改为StringBuilder

l）增加“根据蝶形对象识别需要合并的组件”逻辑

m）增加“根据易分对象识别需要拆分的组件”逻辑

n）增加设计模式识别器，目前可识别8种设计模式（预期最高值可达到15种）

l）更改数据库驱动版本

1.2.1_03 2012-03-22

a）将记录当前运行组和命令的职责统一由CommandConfMgr承担

b）调整JavaPackageTreeCreator.createTree()的返回数据结构

c）向JDependUnit增加getJavaPackages和getPath两个接口

d）完善切换工作区功能

e）初始化统计功能cooper-statistics

f）将ui中的context、config移入到core中，被cooper-statistics使用

g）创建AsynAction（具有进度条跟踪），改造statistics下的多个同步Action，并改进CommandPanel.run()方法（创建CommandAction）

h）引入GRASP

i）增加重构功能（增加和删除组件）

j）创建refactor，将adjust和memento合并进来，并提供统一接口

k）增加分析器“JavaClass内外比例浏览”

l）创建POM工程cooper-service-interface，将后台服务的接口从service中移入到该工程中，并创建client.exe

m）调整问题关系的权值：将循环依赖的权值降低，将下层组件依赖上层组件，以及稳定的组件依赖不稳定的组件的权值增加

n）创建TODOList模块，并为其编写了一些识别TODOItem的逻辑，包括：MoveJavaClass、UniteComponent、SplitComponent、AdjustAbstract

o）针对MoveJavaClass、UniteComponent，编写了虚拟执行逻辑

p）调整彼此依赖关系的关注程度算法，由1-A/B改为1-A/(A+B)

q）编写了一种SplitCompoentTODOItem的虚拟执行逻辑

r）编写了对AdjustAbstractTODOItem的建议

1.2.1_02 2012-01-31

a）调整文本文件编码格式（由GBK到UTF-8）

b）将byte[]和AnalysisResult之间的转化逻辑由Repository移入到AnalysisResult中

c）引入圈子Panel（类似飞秋），可以基于此交换分析结果【发送消息端口2426（UDP）；发送分析结果端口2427（TCP）】

d）将底层ArrayList改为HashSet，大幅提高了查询性能;为了向后兼容，所有Model下的集合类型全部采用Collection

e）重构部分knowledge组件代码，包括建立DomainAnalysisMgr，改进Expert、DomainAnalysis两个接口

f）改进TableRelation计算逻辑：将只有两个Class都有写同一个数据库表的情况视其为彼此依赖，一读一写为单项依赖，全部读为无依赖

g）将Relation中的“关注级别”改为“关注类型”，新增“关注级别”的概念（对于彼此依赖的关注类型进一步分析了关注程度，‘耦合值比例‘高的'细依赖'更值得关注）

h）修正合理性计算公式，对于“悬浮的组件”其合理性定价为0.5（即不好也不坏，视未来连入系统中后或好或坏）

i）对于稳定的组件依赖不稳定的组件的关系按着’稳定性差值‘进行了倒序排序

j）改进分析器接口参数由Collection<JDependUnit>变为AnalysisResult

k）修正内聚性指数计算公式bug，其分组耦合最大顺序差值计算有误（在JavaClass环境下未按组件分组计算耦合值）

l）将分数取精度的职责由显示分数的部件移入到提供分数的部件上

m）对持久化的分析数据进行压缩处理

1.2.1_01 2011-12-09

a）创建TDC（二维格）

b）向移动历史列表中增加分数列

c）优化了JDependUnitMgr和AdjustHistory在暂存当前结果的职责分配

d）创建组件模型时增加对包列表的过滤功能

e）修正FileUtil.getFileData bug

1.2.1_00 2011-12-02

a）引入Maven，采用Maven管理Cooper

1.2.0_08 2011-11-30

a）优化命名组删除逻辑（一并删除执行历史和报告历史）

b）不在独立线程中保存执行历史，以避免线程同步问题

c）修正创建命令组时的bug

d）优化CommandConfMgr对外API

e）修正移动JavaClass和合并组件的bug(向JDependUnitMgr增加clearCache接口)

f）优化2D图形对于关联元素的展示效果（区分Ca、Ce和Mutual）

g）增加小结列表在使用重构功能后，显示原始值的功能

1.2.0_07 2011-11-24

a）在保存分数时增加了保存结果的能力

b）调整了日志接口

c）增加上传分数的功能

d）将分数持久化功能由knowledge组件移入到core中

e）将分析器持久化功能由knowledge组件移入到service组件中

f）将ui组件下的Class按着UI布局功能相关的思路以包的形式做了些聚集，新形成了analyzer、command、property三个包

g）加入对执行结果进行折线图展现的功能

1.2.0_06 2011-11-16

a）修正小结计算时的bug

b）增加3D效果中与用户交互的功能

c）修正组件合并bug

d）增加创建命令组时，能够一次选择多个项目的功能，并增加提示

e）优化创建命令组时第一个页面的布局管理器

f）将全局忽略包列表信息由parse.properties移入到ignore.properties

g）修正底层解析逻辑bug（未考虑重复出现的javaClass）

h）支持执行路径有空格

i）支持Ibats以Annotation方式写在JavaClass中的SQL识别，支持Ibats3.0 Mapper方式编写的XML文件中的SQL识别

1.2.0_05 2011-11-03

a）修正检测循环依赖的bug

b）在平面图形中增加对循环依赖链的显示

c）引入java3D和Wilma开源项目，以3D效果显示组件模型

d）修正在创建命令组时的bug

1.2.0_04 2011-10-26

a）将calRelation的职责由Service（过程）中移动到AnalysisResult（实体）中【理由：calRelation的资源来源AnalysisResult可以提供】,删除ReportInputData

b）创建计算总分的逻辑，并分配给AnalysisResult

c）为分析器框架增加UI回调函数能力

d）修改耦合值和内聚值显示逻辑

e）将ServiceConfigurator由service组件移入到core组件中，并更名为ServiceProxyConfigurator

f）ParseConfigurator由服务端自己维护（新建了维护UI），而不从客户端传入

g）在框架上增加收集XML信息的逻辑，并增加对ibatis配置文件中SQL的解析

h）重构了JDependUnitMgr类，增加了setResult的功能

i）显示结果时增加显示评价的弹出窗口

j）向系统日志增加Warning级别

k）优化图形显示隐藏其他组件功能

1.2.0_03 2011-10-12

a）将数据库拆分成客户端数据库和服务器数据库，并将数据库表以此分布，修改了获取连接的接口

b）整理配置文件信息所在位置，将conf中的部分信息细分成了commandconf和componentconf，将用户行为收集的持久化信息移动到conf下

c）修正了与命令相关的bug(command.xml、CommandSettingDialog、GroupConf)

d）重构了客户端和服务器交互：将多次交互改为一次交互

e）创建ParseConfigurator，将PropertyConfigurator中的部分职责移入到ParseConfigurator下

f）调整组件内聚性指数计算公式，组件内聚性指数=AVE（类内聚性指数）

g）改善定制组件界面的易用性（ComponentPanel）

h）将客户端运行时配置和产生的信息由运行路径改到工作区路径（第一次启动Cooper时要求设置工作区路径），以此避免客户端升级时对原配置信息的影响

i）图形化显示组件关系图增加隐藏其他组件功能，以利于在组件多时对关心的组件关系查看的方便性

1.2.0_02 2011-09-19

a）将core中的component和tree移入model中，调整service内部结构，形成local包

b）增加了方法参数个数大于指定数目的反模式分析器

c）优化MINICooperPanel，增加了图片渐入效果，并增加了2012款mini跑车文字和图片介绍

d）将service中的服务器UI相关代码独立出来，形成server组件

e）在service组件中建立无UI的后端服务启动程序

f）初始化AvertCheat框架

g）向用户信息组件中增加积分概念，并改进日志组件（增加业务日志功能），建立由日志组件触发生成用户积分的逻辑

h）创建用户行为收集逻辑。

1.2.0_01 2011-8-16

a）修改核心领域模型（超5星修改）

	i）抛弃JavaClass和JavaPackage是分析单元的设计，（保留）将其作为产生分析单元的metaData看待
	ii）所有分析单元以实现Component的方式出现，原JavaClass和JavaPackage作为分析单元的职责由JavaClassComponent和JavaPackageComponent代替
	iii）Component不在与JavaPackage关联，仅仅与JavaClass关联
	
	理由：1、降低JavaClass和JavaPackage的职责负担
		 2、Component的范围可以比JavaPackage小，或者会是几个JavaPackage的部分JavaClass的逻辑划分（Component不在与JavaPackage关联）
		 
    涉及的修改量：model组件40%；core组件20%；ui和service各5%; app组件70%

b）修改核心领域模型（对上一条的修正）

	i）保留JavaClass作为分析单元的设计
	ii）调整其指标计算的方法
	
	理由：1、很多场景下JavaClass都将被当做分析单元来看待。
	
c）修改核心数据采集逻辑：一个Class作为对方的属性出现就不计参数和变量，作为参数就不计变量。

d）建立了“关系关注水平”概念，分为相互依赖、循环依赖、下层组件依赖上层组件、违反稳定依赖原则。

e）重构组件模型配置信息数据结构

f）重新设计内聚性指数公式，引入分组耦合最大顺序差值计算元素

g）向TableRelation增加type属性，并新增TableRelation浏览分析器

h）将service中的parse的职责独立出来，形成parse组件

1.1.5_05 2011-7-29

a）新建了“关键字搜索”分析器，并精化了分析器基础框架

1.1.5_04 2011-7-22

a）将AntiPattern更名为Analyzer

b）实现了Analyzer通过Server交流分享

1.1.5_03 2011-7-6

a）增加“识别有移动倾向的JavaClass”关注点：与源组件中的类没有关系，而与唯一目标组件中的类存在关系的类。

b）调整了部分内部结构：增加了CSharpClassBuilder；创建了report.ui（增加ClassListDialog）;调整JDependServiceProxy.addDirectory的异常类型由IOException变为JDependException

c）整理Session相关逻辑；将service.remote独立出来；

1.1.5_02 

a）关系图中支持关系的鼠标右键事件（查阅指定关系细节）。

b）重构jdepend.ui.model，将其更名为jdepend.ui.config

c）重构组件模型配置信息装载结构（一个命令组包含多个组件模型，一个组件模型由多个组件组成，一个组件是由多个Package组成的）
      一个组件模型代表了一种看待程序的方式
      
d）重构SummaryPrinter相关类，包括AnalysisResult和ReportInputData，减少公共耦合

e）重构了面向对象指数计算方法，对于组件的面向对象指数公式定义为=有状态类个数/与外部有关系的类个数

1.1.5_01 2011-4-22

a）增加新关系：TableRelation（两个操作同一张数据库表的JavaCLass被认为存在TableRelation的关系）

b）增加web方式访问入口

c）分析单元增加内聚性指数指标（内聚性指数=内聚值/(内聚值+耦合值)，值越大越好）（将以前的内聚性改为内聚值，将耦合性改为耦合）

1.1.4_04

a）将循环依赖识别的职责独立成接口CycleIdentifyer，默认收集第一个识别的循环依赖链（其他的不识别）[OnlyOneCycleIdentifyer]

b）修改在server模式下运行的分析数据结构

c）修正Group修改不了属性的bug

d）调整release文件格式：classes换成jar，并调整启动程序的bat

e）改进DIPAttentionPoint，仅识别“组件外”依赖的JavaClass是否是抽象的

f）修正在Server模式下，conf信息修改不同步问题

g）修正packageViewer存在多tree root时的bug

h）修正在小结窗口中忽略命令缺欠

1.1.4_03 2011-01-13

a）调整组件结构，将core中的parse逻辑拆分出来形成service组件，将core中的部分代码移入到model中

b）增加了部分关注的说明内容*

c）增加过滤掉分析范围外的JavaClass关系信息

d）初始化service.remote.ui

e）改进客户端与服务器的交互，建立会话管理（比较复杂：涉及到会话的生命周期和服务的生命周期管理，并考虑了服务端的“可用性”）

f）优化JavaClassRelationCreator性能

1.1.4_02 2010-12-24

a）重构了分析结果，增加了CommandRunningContext

b）增加设置默认显示结果页的能力

c）增加了UI配置文件

d）优化对分析结果的保存

e）整理了设计原则知识

1.1.4_01 2010-12-15

a）核心算法增加对依赖外部的JavaPackage的分析（主要识别了被依赖的JavaClass和依赖的JavaClass）*

b）修改核心解析算法针对泛型的缺陷

c）丰富了图形显示

d）初始化knowledge（含db），将core分离出model和framework

e）增加了每次分析结果的保存能力

1.1.3_08 20101109

a）将DIPJDepend移入到AntiPattern中

b）增加adjust时的历史保存能力*

c）修正adjust的bug

d）核心解析算法中不收集由PackageFilter过滤掉的JavaClass

e）完善核心调用上的错误处理

f）增加对adjust历史进行比较能力*

g）增加按规则识别组件的模板命令*

h）命令组增加显示和隐藏能力

i）CaCe列表增加关联关系查询

1.1.3_07 2010-10-25

a）优化UI，增加数据的显示效果。

b）将配置文件统一移动到conf下。

c）增加命令执行时的错误处理。

d）重构ui和report，重新分配CommandAdapter和JDependReport的职责分工，并整合report层的所有javaClass

e）调整UI

f）增加adjust能力

g）优化图形显示内聚性和耦合性

h）将image移出src

1.1.3_06 2010-6-7

a）修改bug：Relation对象getItems无内容；GroupCommand不能够修改；GroupCommand path 计算不合适。

b）提供每个Group可以设置自己的FilterPackages能力

c）修改 ReportHistory bug（调整存储结构）

d）精化内聚性的计算逻辑，使得在同一个运行结果下不同入口进入，内聚性的值是相同的。

e）将ClassListPanel中javaClass的各指标计算逻辑都采用在当前组件划分方式下进行计算。

f）精化耦合性的计算逻辑，使得在同一个运行结果下不同入口进入，耦合性的值是相同的。

g）新增JavaClass在多种划分方式下的循环依赖判断逻辑。

h）新增覆盖检查

1.1.3_05 2010-5-17

a）将Analysis中创建Relation的部分职责移入到JDependUnit中，向JDependUnit增加了coupling和cohesion接口。

b）将CouplingMetrics、CohesionMetrics和ObjectOrientedMetrics的职责移入到JDependUnit中。

c）向JavaClass增加haveState方法，并扩展haveState的逻辑：1、自身存在属性；2、包含的JavaClass中含有属性；3、继承的JavaClass含有属性。

d）在core中创建tree包，负责按着JavaClass间不同的Relation类型创建Tree

e）增加对包含结构的分析

1.1.3_04 2010-5-10

a）优化图形显示

b）向Group增加信息，并修改Group的存储结构。

c）增加显示源文件功能。

d）增加对继承树的分析。

e）核心解析算法支持JDK1.5以上泛型技术对JavaClass之间关系的影响。

f）增加工程样例：subsystem、game1、game2

g）增加反模式：ActionHaveState、ServiceHaveState

1.1.3_03 2010-4-9

a）增加"蝶形对象检测"反模式

b）删除JavaClassJDepend，由JDepend承担

c）输出报告增加小结

d）增加组件组维护功能

1.1.3_02 2010-3-17

a）整合报告层继承树，将各项功能集中于JDepend上

b）向输出结果增加与客户互动的内容

	b1、优化summary、relation等
	b2、优化javaClass列表
	b3、以弹出窗口增加数据域的深度展开

c）中文化界面信息，并增加注释

d）向命令组增加多组件配置能力

e）增加反模式框架，并编写具体的反模式

f）增加反模式属性的持久化能力

g）增加报告输出格式多样的能力（Report、JDependReportAdapterFactory）

1.1.3_01 2010-1-29

a）创建JDependDeployComponent，分析client和server的耦合性，产生DeployRelation.txt文件。

b）修改解析监听器（ParseListener），将其分解成解析（ParseListener）和构建两个监听器（BuildListener），并删除解析监听器中的解析器参数（AbstractParser）。

	减少client对server中parse的了解。

c）使得Command lazy load。

d）创建JDependServiceProxy和JDependLocalService、JDependRemoteService。

e）序列化client对server间传递的参数。

f）向JDependRemoteServiceImpl中增加采用JDependLocalService的实现。

g）调整PropertyConfigurator由client构造

h）创建JDependSession和JDependRequest，并调整JDependRemoteServiceImpl和JDependServiceRemoteProxy

i）创建Server端监控窗口

j）将Analysis涉及的逻辑由report层移入到core中

k）将动态Metrics计算由report移到JDependUnit中

1.1.2_07 20091228

a）创建CustomComponent和jdepend.core.context。

b）对Command.execute增加错误处理。

c）修正CommandSearch bug。

d）完善New Group Wizard。

1.1.2_06 20091225

a）命令以组为单位单独存储。

b）隐藏ui.model中的CommandConfigurator和GroupConfigurator，提供统一的Facade：CommandMgr

c）将CommandMgr内部使用CommandConfigurator和GroupConfigurator的地方修改为使用GroupInfo

d）创建New Group Wizard

e）关闭解析log（使用了大量内存）

1.1.2_05 20091208

a）增加Command配置文件装载时的错误处理。

b）修正解析核心算法。

c）修正解析日志数据输出不全的问题。

d）将大文本信息采用StringBuffer类型进行函数间传递。

e）对命令进行排序显示

f）添加涉及文件处理业务的错误处理

1.1.2_04 20091125

a）文本报告输出增加关键字粗体。

b）将JDependReport由report移入到ui中。

c）修正全局setting后不马上有效的bug。

d）增加指标ObjectOrientedMetrics【attributeCount / methodCount】。

	说明：面向对象强调信息和操作的“合作”来完成赋予对象的职责。对象的属性一般认为成对象拥有的信息，方法认为成对象提供的服务。该指标推荐写更多的拥有信息的对象，并且有限程度的提供服务（也就是封装）。

1.1.2_03 20091117

a）整理包结构，将ext、analyse合并到framework中，并起名为core；cooper改名为ui。

b）合并PackageByMetricsComparator

1.1.2_02 20091031

a）采用-verbose参数为JMeld-2.1.jar包进行瘦身。

b）创建JDependAnalysis，以降低framework对外的耦合。【架构级】

c）将ReportHistoryListener调整为ReportListener，作为report反向调用cooper的手段。

d）增加ClassPropertyPanel。

e）改进UI易用性：属性区支持双击最大和正常化。

f）将JDependUtil改为JDependReport，将ReportHistory作为工具类出现，onReportHistorySave触发职责由ReportHistory转到JDependReport上。

g）将Component和JavaPackage的关系的建立代码都集中在Component.addJavaPackage()中处理。

1.1.2_01 20091025

a）全面改进循环依赖识别算法，采用广度与深度相结合的更有效率的算法。

b）提高命令配置页面的易用性。

c）向CommandMgr中的runCommands增加synchronized关键字，在启动线程和编辑命令窗口线程间进行同步。

d）创建LogUtil。

e）将底层分析算法由ClassFileParser改建为BCELClassFileParser（引入了apache开源项目Bcel）。

	通过jdepend.properties的ClassFileParser参数进行配置。

f）建立了lineCount指标。

g）改进UI易用性：工作区支持双击最大和正常化。

1.1.2_00 20091015

a）重构cooper的左侧树，增加CulturePanel

b）增加DesignPrinciplePanel

1.1.1_03 20091012

a）完善ReportHistory各项处理。

b）增加图形化比较ReportHistory功能。

c）建立抽象类资格评判器。

1.1.1_02 20091007

a）将基本JavaClass作为组件：JavaClassComponent

b）更新设计文档。

c）向JavaClassDetail增加methods

d）将StaffingDAOToServiceJDepend修改为StaffingDAOPackageToServicePackageJDepend，将StaffingActionToDAOJDepend修改为StaffingActionPackageToDAOPackageJDepend

e）创建ReportHistory（ReportHistoryListener解决了report和cooper的依赖问题）

	决策：为了遵守cooper“有小又有劲儿”的原则，报告的持久化不采用数据库技术，而是采用手工编写的文件处理手段。
	准备：存储报告是为了比较，文本文件内容比较不打算自己编写，找到了开源项目JMeld承担。

1.1.1_01 20090930

a）将TableSorter独立，并以Float作为排序类型。

b）将JavaPackageType抽象为JDependUnitType，并调整JDependUnit、JDependUnitTypeMgr等内容。【架构级】

c）建立Cooper的JavaClassType。

d）创建周年纪念版。

1.1.1_00 20090927

a）FileUtil：所有文本文件存储都采用UTF-8格式。

b）向输出结果tab中增加关闭按钮。

c）JavaClass实现JDepend接口，将RelationInfo中的信息移入到JavaClass中，删除RelationInfo，及RelationParseLister。【架构级】

d）将relation部分内容移入到framework中。

e）将JavaClass作为分析对象进行分析。

f）向Summary中的Table增加排序功能。

1.1.0_03 20090926

a）修改报告层基类JDepend的方法setWriter为setStream。

b）修改报告层基类JDepend的方法analyze，添加返回值。

c）修改报告层execute方法中JDepend和JDependUtil的职责分配。

d）将CouplingJDepend和CohesionJDepend的JavaClass信息以Tree的形式输出。

e）CommandPanel：限制同一时刻执行两个命令。

1.1.0_02 20090924

a）完善Cooper对jar文件的处理。

b）将log也输出到Cooper中。

c）向Command增加tip，并将command存储格式由properties改为xml，优化了save操作。

1.1.0_01 20090922

a）以group来管理command。

b）增加refarch等group，提供最佳实践。

c）建立JavaClassAnalysis和AnalyseListener，为执行长时间Analyse工作的对象提供listener。

d）改善CouplingMetrics和CohesionMetrics性能。

e）Command：将initArgs 从 execute 中独立出来，并修改了全部的报告层JDepend。

f）性能调优：将JavaPackage的classes类型由HashSet改为ArrayList，并调整了Component.getClasses的内容。

g）性能调优：缓存Component部分计算结果

1.1.0_00 20090917

a）完善cooper功能：命令的持久化、进度条、全局配置文件的设置等

b） 采用多线程等技术，改进FileManager的性能

c）建立RelationJDepend在cooper下的多种输出格式

d）将实现Command的类改造成无状态对象

e）将test调整到app的self中

f）将xml格式输出的报告改造成cooper命令的要求

g）将xmlui.JDepend的输出增加Tree形式

1.0.2_01 20090907

a）更新设计文档

b）mapui中增加了图形化输出Intensity的能力

c）使得swingui.JDepend可以以组件为单位输出分析结果

d）初始化cooper

1.0.2_00 20090827

a）删除RelationParserListener作为ParseListener职责注册的地方

b）创建JDependUnit接口，并改变了Component和JavaPackage的继承关系。【架构级】

c）创建CalculateMetricsTool，用于计算计算指标

d）向Relation中增加关系明细，并在RelationJDepend中增加filter打印关注的关系明晰

1.0.1_06 20090824

a）对framework包中未被其他包使用的元素进行隐藏

b）将jdepend.properties文件内置，减少对环境的依赖

c）删除了AbstractParser.onParsedJavaClass方法上多余的参数

d）将RelationParserInfo修改为JavaClassDetail，合并到Framework中，并将RelationParserListener的部分逻辑移入到了ClassFileParser中。【架构级】

1.0.1_05 20090820

a)对报告层对象进行公共提取，避免生成报告时需要编写新类。（CohesionJDepend、CouplingJDepend、RelationJDepend、ComponentJDepend、JavaPackageComponent）

b）将src拆解成6个包

c）消除了Framework和ext的循环依赖【PackageByMetricsComparator】

d）修正了prefuse项目中不能画箭头的bug

e）report建立了filter的概念

1.0.1_04 20081225

a)重新组织了jdepend.analyse包，形成了Relation和Element。

b)定义了Relation的Balance概念，形成了Relation的输出列表。

c)向《JDepend改造与应用.doc》中增加了一个新的章节

1.0.1_03 20081223

a)增加jdepend.analyse包，对关系进行分析。参见RelationJDepend。

b)修正了CohesionMetrics中的一个bug。

1.0.1_02 20081223

a)将RelationItem与javaPackage解耦，使得RelationItem体现为JavaClass之间的关系。

注：RelationItem: public abstract float getIntensity(JavaPackage javaPackage【不合理的依赖】);

b)将compnent和metric合并到framework中

1.0 init 20081030

a)可自定制分析单元
	分析单元是需要有指标概念的。

b)可以对分析单元进行类型定义

c)可以定义自己的指标
	指标是需要有公式说明，并能够计算出数值的。

d)可以设计自己的关注点
	关注点是观察员关心的一种数据。